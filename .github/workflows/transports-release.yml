name: Transports Release

# Triggers when core dependency updates are merged to main
on:
  push:
    branches: ["main"]
    paths: ["transports/go.mod"]
  # Add manual trigger support
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual release'
        required: true
        type: string

# Prevent concurrent runs for the same trigger to avoid conflicts
concurrency:
  group: transports-release
  cancel-in-progress: true

# Docker registry configuration
env:
  REGISTRY: docker.io
  ACCOUNT: maximhq
  IMAGE_NAME: bifrost

jobs:
  # Main job: Create transport tag, build Go binaries, upload to S3
  build-transports:
    needs: check-release-flags
    if: needs.check-release-flags.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need write access to create tags
    outputs:
      # Pass version information to the Docker build job
      transport_version: ${{ steps.manage_versions.outputs.transport_version }}
      core_version: ${{ steps.manage_versions.outputs.core_version }}
    steps:
      # Checkout with full history and tags for version management
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history needed for git tag operations
          fetch-tags: true # Ensure all tags are available
          token: ${{ secrets.GH_TOKEN }} # Personal token for pushing tags

      # Set up Go environment for building binaries and managing dependencies
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.1"

      # Set up Node.js for running our CI scripts
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      # Install script dependencies first
      - name: Install script dependencies
        working-directory: ci/scripts
        run: npm ci

      # Configure Git for automated commits and tagging
      - name: Configure Git
        working-directory: ci/scripts
        run: node git-operations.mjs configure

      # Determine versions and create transport tag
      - name: Create transport tag
        id: manage_versions
        run: |
          # Get current core version from go.mod and generate new transport version
          node ci/scripts/manage-versions.mjs transport-release >> "$GITHUB_OUTPUT"

          # Store the transport version in a shell variable
          TRANSPORT_VERSION=$(grep "transport_version=" "$GITHUB_OUTPUT" | cut -d'=' -f2)

          # Echo for logging
          echo "üì¶ Creating transport tag: ${TRANSPORT_VERSION}"

          # Export the variable so it's available after cd
          export TRANSPORT_VERSION

          # Create and push transport tag from scripts directory
          cd ci/scripts && node git-operations.mjs create-tag "$TRANSPORT_VERSION"

      # Build the UI from the current repo state
      - name: Build UI static files
        working-directory: ui
        run: |
          npm ci
          npm run build

      # Cross-compile Go binaries for multiple platforms
      - name: Build Go executables
        run: |
          echo "üî® Building Go executables..."
          chmod +x ci/scripts/go-executable-build.sh
          # go-executable-build.sh called from root, expects paths relative to root
          ci/scripts/go-executable-build.sh bifrost-http ./dist ./bifrost-http "$(pwd)/transports"

      # Upload the built binaries to S3 for distribution
      - name: Upload builds to S3
        env:
          # R2 (Cloudflare S3-compatible storage) credentials
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          # Trim whitespace from secrets
          export R2_ENDPOINT="$(echo "$R2_ENDPOINT" | tr -d '[:space:]')"
          export R2_ACCESS_KEY_ID="$(echo "$R2_ACCESS_KEY_ID" | tr -d '[:space:]')"
          export R2_SECRET_ACCESS_KEY="$(echo "$R2_SECRET_ACCESS_KEY" | tr -d '[:space:]')"
          # Strip 'transports/' prefix and add 'v' prefix for upload script
          VERSION_ONLY="${{ steps.manage_versions.outputs.transport_version }}"
          VERSION_ONLY=${VERSION_ONLY#transports/v}
          # upload-builds.mjs must run from root to find ./dist directory
          node ci/scripts/upload-builds.mjs v${VERSION_ONLY}

  # Second job: Build and push Docker image
  # Runs after transport build completes successfully
  build-and-push-docker:
    needs: [check-release-flags, build-transports]
    if: needs.check-release-flags.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read # Only need read access for Docker build
    steps:
      # Checkout repository for Docker build context
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up QEMU for cross-platform Docker builds (ARM64, AMD64)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with Docker Hub for pushing images
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image using the freshly built UI static files
      - name: Extract metadata for Docker
        id: meta
        run: |
          # Strip 'transports/' prefix and ensure 'v' prefix for Docker tags
          VERSION_ONLY="${{ needs.build-transports.outputs.transport_version }}"
          VERSION_ONLY=${VERSION_ONLY#transports/v}

          cat << 'EOF' >> "$GITHUB_OUTPUT"
          version=v${VERSION_ONLY}
          tags<<TAGS
          ${{ env.REGISTRY }}/${{ env.ACCOUNT }}/${{ env.IMAGE_NAME }}:v${VERSION_ONLY}
          ${{ env.REGISTRY }}/${{ env.ACCOUNT }}/${{ env.IMAGE_NAME }}:latest
          TAGS
          EOF

      # Generate timestamp for image labels
      - name: Generate timestamp
        id: timestamp
        run: echo "created_at=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./transports/Dockerfile
          push: true # Push to Docker Hub
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Bifrost LLM Gateway (HTTP)
            org.opencontainers.image.description=The fastest LLM gateway written in Go. Learn more here: https://github.com/maximhq/bifrost
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ needs.build-transports.outputs.transport_version }}
            org.opencontainers.image.created=${{ steps.timestamp.outputs.created_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64,linux/arm64 # Multi-architecture support
          cache-from: type=gha # Use GitHub Actions cache
          cache-to: type=gha,mode=max # Save cache for future builds

      # Final success notification with version information
      - name: Success notification
        run: |
          echo "‚úÖ Successfully built and pushed:"
          echo "üöÄ Transport Version: ${{ needs.build-transports.outputs.transport_version }}"
          echo "üîß Core Version: ${{ needs.build-transports.outputs.core_version }}"
          echo "üê≥ Docker Tags: ${{ steps.meta.outputs.tags }}"

      - name: Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            TITLE="üöÄ **Transport Release Complete**"
            STATUS="‚úÖ Success"
            TRANSPORT_VERSION_LINE="**Transport Version**: \`${{ needs.build-transports.outputs.transport_version }}\`"
            CORE_VERSION_LINE="**Core Version**: \`${{ needs.build-transports.outputs.core_version }}\`"
            MESSAGE="$TITLE\n**Status**: $STATUS\n$TRANSPORT_VERSION_LINE\n$CORE_VERSION_LINE\n**Branch**: \`main\`\n**Commit**: \`${{ github.sha }}\`\n**Author**: ${{ github.actor }}\n**[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**"
          else
            TITLE="üöÄ **Transport Release Failed**"
            STATUS="‚ùå Failed"
            MESSAGE="$TITLE\n**Status**: $STATUS\n**Branch**: \`main\`\n**Commit**: \`${{ github.sha }}\`\n**Author**: ${{ github.actor }}\n**[View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**"
          fi
          payload="$(jq -n --arg content "$MESSAGE" '{content:$content}')"
          curl -sS -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK"
