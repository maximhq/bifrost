<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="6" failures="4" errors="0" time="13.090527">
	<testsuite tests="6" failures="4" time="13.090000" name="github.com/maximhq/bifrost/tests/core-providers" timestamp="2025-10-27T23:12:19-07:00">
		<properties>
			<property name="go.version" value="go1.25.1 darwin/arm64"></property>
		</properties>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Medium_MP3" time="12.850000">
			<failure message="Failed" type="">=== RUN   TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Medium_MP3&#xA;=== PAUSE TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Medium_MP3&#xA;=== CONT  TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Medium_MP3&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;Primary provider openai with model gpt-4o-mini-tts and 1 fallbacks&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;attempting speech request for provider openai&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;attempting speech request for provider openai&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;attempting speech request for provider openai&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:24-07:00&#34;,&#34;message&#34;:&#34;request speech for provider openai completed&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:24-07:00&#34;,&#34;message&#34;:&#34;No primary error, we should not try fallbacks&#34;}&#xA;    transcription_stream.go:103: üîÑ Generated TTS audio for stream round-trip: /var/folders/p0/3mgzlyg541g1j9s2d1wskc040000gn/T/stream_roundtrip_StreamRoundTrip_Medium_MP3.mp3 (804864 bytes)&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;attempting transcription_stream request for provider openai&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;request transcription_stream for provider openai completed&#34;}&#xA;{&#34;level&#34;:&#34;warn&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;error while executing stream request: failed to make HTTP request to provider API&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;attempting transcription_stream request for provider openai&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;request speech for provider openai completed&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:29-07:00&#34;,&#34;message&#34;:&#34;No primary error, we should not try fallbacks&#34;}&#xA;    transcription_stream.go:191: üìä Transcription chunk 0 latency: 0 ms&#xA;    transcription_stream.go:196: ‚úÖ Received transcription text chunk 0 with latency 0 ms: &#39;Testing Speech Synthesis and Transcription Roundtrip Functionality with Bifrost AI Gateway. This comprehensive text includes various punctuation marks, commas, periods, exclamation points, question marks, semicolons, and colons for thorough testing. We also include numbers like 123, 456.789, and technical terms such as API, HTTP, JSON, WebSocket, and machine learning algorithms. The system should handle abbreviations like Dr., Mr., Mrs., and acronyms like NASA, FBI, and CPU correctly. Additionally, we test special characters and symbols, at, hash, dollar, percent, and, star, equal, and various currency symbols like euro, pound, yen.&#39;&#xA;    transcription_stream.go:209: ‚ö†Ô∏è Unexpected object type in stream: &#xA;    transcription_stream.go:212: ‚ö†Ô∏è Unexpected model in stream: whisper-1&#xA;    transcription_stream.go:234: Transcribed text should not be empty&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;closing all request channels...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider parasail exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider mistral exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider mistral exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider groq exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider mistral exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider vertex exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider groq exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cerebras exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider azure exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openrouter exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider bedrock exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cerebras exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider anthropic exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider cohere exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider openai-custom exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;debug&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;worker for provider gemini exiting...&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:32-07:00&#34;,&#34;message&#34;:&#34;all request channels closed&#34;}&#xA;            --- FAIL: TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Medium_MP3 (12.85s)&#xA;</failure>
		</testcase>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI/OpenAITests/TranscriptionStream" time="0.000000">
			<failure message="Failed" type="">=== RUN   TestOpenAI/OpenAITests/TranscriptionStream&#xA;=== PAUSE TestOpenAI/OpenAITests/TranscriptionStream&#xA;=== CONT  TestOpenAI/OpenAITests/TranscriptionStream&#xA;        --- FAIL: TestOpenAI/OpenAITests/TranscriptionStream (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI/OpenAITests" time="0.000000">
			<failure message="Failed" type="">=== RUN   TestOpenAI/OpenAITests&#xA;    tests.go:24: üöÄ Running comprehensive tests for provider: openai&#xA;    tests.go:95: &#xA;        ================================================================================&#xA;    tests.go:96: COMPREHENSIVE TEST SUMMARY FOR PROVIDER: OPENAI&#xA;    tests.go:97: ================================================================================&#xA;    tests.go:102: ‚úÖ SUPPORTED:   TextCompletion            ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   SimpleChat                ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   CompletionStream          ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   MultiTurnConversation     ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   ToolCalls                 ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   MultipleToolCalls         ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   End2EndToolCalling        ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   AutomaticFunctionCall     ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   ImageURL                  ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   ImageBase64               ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   MultipleImages            ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   CompleteEnd2End           ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   SpeechSynthesis           ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   SpeechSynthesisStream     ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   Transcription             ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   TranscriptionStream       ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   Embedding                 ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   Reasoning                 ‚úÖ Configured to run&#xA;    tests.go:102: ‚úÖ SUPPORTED:   ListModels                ‚úÖ Configured to run&#xA;    tests.go:109: --------------------------------------------------------------------------------&#xA;    tests.go:110: CONFIGURATION SUMMARY:&#xA;    tests.go:111:   ‚úÖ Supported Tests:   19&#xA;    tests.go:112:   ‚ùå Unsupported Tests: 0&#xA;    tests.go:113:   üìä Total Test Types:  19&#xA;    tests.go:114: &#xA;    tests.go:115: ‚ÑπÔ∏è  NOTE: Actual PASS/FAIL results are shown in the individual test output above.&#xA;    tests.go:116: ‚ÑπÔ∏è  Look for individual test results like &#39;PASS: TestOpenAI/SimpleChat&#39; or &#39;FAIL: TestOpenAI/ToolCalls&#39;&#xA;    tests.go:117: ================================================================================&#xA;    --- FAIL: TestOpenAI/OpenAITests (0.00s)&#xA;</failure>
		</testcase>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI" time="12.860000">
			<failure message="Failed" type="">=== RUN   TestOpenAI&#xA;{&#34;level&#34;:&#34;warn&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;failed to prepare provider ollama: failed to create provider for the given key: base_url is required for ollama provider&#34;}&#xA;{&#34;level&#34;:&#34;warn&#34;,&#34;time&#34;:&#34;2025-10-27T23:12:20-07:00&#34;,&#34;message&#34;:&#34;failed to prepare provider sgl: failed to create provider for the given key: base_url is required for sgl provider&#34;}&#xA;--- FAIL: TestOpenAI (12.86s)&#xA;</failure>
		</testcase>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Basic_MP3" time="5.910000"></testcase>
		<testcase classname="github.com/maximhq/bifrost/tests/core-providers" name="TestOpenAI/OpenAITests/TranscriptionStream/StreamRoundTrip_Technical_MP3" time="12.400000"></testcase>
	</testsuite>
</testsuites>