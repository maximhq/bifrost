# Default values for Bifrost
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Bifrost application configuration
replicaCount: 1

image:
  repository: ghcr.io/maxim-ai/bifrost
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}    
  hosts:
    - host: bifrost.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 512Mi

livenessProbe:
  httpGet:
    path: /metrics
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /metrics
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

# Bifrost specific configuration
# You can find entire schema at https://getbifrost.ai/schema
bifrost:
  # Application settings    
  appDir: /app/data
  port: 8080
  host: 0.0.0.0
  logLevel: info
  logStyle: json
  
  # Encryption key for sensitive data
  # Can be set as a secret or environment variable
  encryptionKey: ""
  
  # Client configuration
  client:
    dropExcessRequests: false
    initialPoolSize: 300
    allowedOrigins:
      - "*"
    enableLogging: true
    enableGovernance: false
    enforceGovernanceHeader: false
    allowDirectKeys: true
    maxRequestBodySizeMb: 100
    enableLitellmFallbacks: false
    prometheusLabels: []
  
  # Provider configurations (add your provider keys here)
  providers: {}
    # openai:
    #   keys:
    #     - value: "sk-..."
    #       weight: 1
    # anthropic:
    #   keys:
    #     - value: "sk-ant-..."
    #       weight: 1
  
  # MCP (Model Context Protocol) configuration
  mcp:
    enabled: false
    clientConfigs: []
      # - name: "example-mcp"
      #   connectionType: "stdio"
      #   stdioConfig:
      #     command: "/path/to/mcp/server"
      #     args: []
      #     envs: []
  
  # Plugins configuration
  plugins:
    telemetry:
      enabled: false
      config: {}
    
    logging:
      enabled: false
      config: {}
    
    governance:
      enabled: false
      config:
        isVkMandatory: false
    
    maxim:
      enabled: false
      config:
        apiKey: ""
        logRepoId: ""
    
    semanticCache:
      enabled: false
      config:
        provider: "openai"
        keys: []
        embeddingModel: "text-embedding-3-small"
        dimension: 1536
        threshold: 0.8
        ttl: "5m"
        conversationHistoryThreshold: 3
        cacheByModel: true
        cacheByProvider: true
        excludeSystemPrompt: false
    
    otel:
      enabled: false
      config:
        collectorUrl: ""
        traceType: "otel"
        protocol: "grpc"

# Storage configuration
storage:
  # Storage mode: sqlite or postgres
  # This determines what config_store and logs_store use
  mode: sqlite  # Options: sqlite, postgres
  
  # Persistent volume for SQLite databases (when mode is sqlite)
  persistence:
    enabled: true
    # storageClass: "-"  # Use default storage class
    accessMode: ReadWriteOnce
    size: 10Gi
    # existingClaim: ""  # Use an existing PVC
  
  # Configuration store settings
  configStore:
    enabled: true
    # type is derived from storage.mode, but can be overridden
    # type: sqlite  # Options: sqlite, postgres
  
  # Logs store settings
  logsStore:
    enabled: true
    # type is derived from storage.mode, but can be overridden
    # type: sqlite  # Options: sqlite, postgres

# PostgreSQL configuration (when storage.mode is postgres)
postgresql:
  # Deploy PostgreSQL as part of this chart
  enabled: false
  
  # Use external PostgreSQL instance
  external:
    enabled: false
    host: ""
    port: 5432
    user: bifrost
    password: ""
    database: bifrost
    sslMode: disable
    # existingSecret: ""  # Use existing secret for password
    # passwordKey: "password"  # Key in the secret
  
  # PostgreSQL subchart configuration (when postgresql.enabled is true)
  auth:
    username: bifrost
    password: bifrost_password
    database: bifrost
  
  primary:
    persistence:
      enabled: true
      size: 8Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
  
  metrics:
    enabled: false

# Vector store configuration
vectorStore:
  # Enable vector store for semantic caching
  enabled: false
  type: none  # Options: none, weaviate, redis
  
  # Weaviate configuration
  weaviate:
    # Deploy Weaviate as part of this chart
    enabled: false
    
    # Use external Weaviate instance
    external:
      enabled: false
      scheme: http
      host: ""
      apiKey: ""
      grpcHost: ""
      grpcSecured: false
    
    # Weaviate subchart configuration (when weaviate.enabled is true)
    replicas: 1
    
    image:
      repository: semitechnologies/weaviate
      tag: "1.24.1"
    
    persistence:
      enabled: true
      size: 10Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    env:
      QUERY_DEFAULTS_LIMIT: "25"
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "none"
      ENABLE_MODULES: ""
      CLUSTER_HOSTNAME: "node1"
  
  # Redis configuration
  redis:
    # Deploy Redis as part of this chart
    enabled: false
    
    # Use external Redis instance
    external:
      enabled: false
      host: ""
      port: 6379
      password: ""
      database: 0
      # existingSecret: ""
      # passwordKey: "password"
    
    # Redis subchart configuration (when redis.enabled is true)
    auth:
      enabled: true
      password: "redis_password"
    
    master:
      persistence:
        enabled: true
        size: 8Gi
      
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 256Mi
    
    metrics:
      enabled: false

# Environment variables
env: []
  # - name: CUSTOM_ENV_VAR
  #   value: "value"

# Environment variables from secrets/configmaps
envFrom: []
  # - secretRef:
  #     name: my-secret
  # - configMapRef:
  #     name: my-configmap

